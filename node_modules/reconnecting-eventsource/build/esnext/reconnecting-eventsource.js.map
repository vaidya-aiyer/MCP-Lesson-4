{"version":3,"file":"reconnecting-eventsource.js","sourceRoot":"","sources":["../../src/reconnecting-eventsource.ts"],"names":[],"mappings":"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","sourcesContent":["// MIT License:\n//\n// Copyright (C) 2022 Fanout, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\nexport interface ReconnectingEventSourceInit extends EventSourceInit {\n    // the maximum time to wait before attempting to reconnect in ms, default `3000`\n    // note: wait time is randomised to prevent all clients from attempting to reconnect simultaneously\n    max_retry_time?: number;\n\n    // the EventSource class to wrap. This allows the use of a polyfill or alternate\n    // implementation instead of the platform-provided EventSource class.\n    eventSourceClass?: typeof EventSource;\n\n    // the last event\n    lastEventId?: string;\n}\n\nexport class EventSourceNotAvailableError extends Error {\n    constructor() {\n        super(\n          'EventSource not available.\\n' +\n          'Consider loading an EventSource polyfill and making it available globally as EventSource, ' +\n          'or passing one in as eventSourceClass to the ReconnectingEventSource constructor.'\n        );\n    }\n}\n\ntype EventType<T extends string> = T extends keyof EventSourceEventMap ? EventSourceEventMap[T] : MessageEvent<any>;\ntype EventListenerType<T extends string> = (this: EventSource, event: EventType<T>) => any;\n\ntype Listeners = {\n  [name: string]: ((this: EventSource, event: Event) => any)[];\n};\n\nexport default class ReconnectingEventSource implements EventSource {\n\n    readonly _configuration: ReconnectingEventSourceInit | undefined;\n    readonly CONNECTING = 0;\n    readonly OPEN = 1;\n    readonly CLOSED = 2;\n\n    // Evidently these are to exist both on the class and the instance\n    static readonly CONNECTING = 0;\n    static readonly OPEN = 1;\n    static readonly CLOSED = 2;\n\n    _eventSource: EventSource | null;\n    _lastEventId: string | null;\n    _timer: NodeJS.Timer | null;\n    _listeners: Listeners;\n    _onevent_wrapped: (this: EventSource, ev: Event) => any;\n\n    readyState: 0 | 1 | 2;\n    url: string;\n    withCredentials: boolean;\n\n    readonly max_retry_time: number;\n    eventSourceClass: typeof EventSource;\n\n    constructor(url: string | URL, configuration?: ReconnectingEventSourceInit) {\n        this._configuration = configuration != null ? Object.assign({}, configuration) : undefined;\n        this.withCredentials = false;\n\n        this._eventSource = null;\n        this._lastEventId = null;\n        this._timer = null;\n        this._listeners = {};\n\n        this.url = url.toString();\n        this.readyState = this.CONNECTING;\n        this.max_retry_time = 3000;\n        this.eventSourceClass = globalThis.EventSource;\n\n        if (this._configuration != null) {\n            if (this._configuration.lastEventId) {\n                this._lastEventId = this._configuration.lastEventId;\n                delete this._configuration['lastEventId'];\n            }\n\n            if (this._configuration.max_retry_time) {\n                this.max_retry_time = this._configuration.max_retry_time;\n                delete this._configuration['max_retry_time'];\n            }\n\n            if (this._configuration.eventSourceClass) {\n                this.eventSourceClass = this._configuration.eventSourceClass;\n                delete this._configuration['eventSourceClass'];\n            }\n        }\n\n        if(this.eventSourceClass == null || typeof this.eventSourceClass !== 'function') {\n            throw new EventSourceNotAvailableError();\n        }\n\n        this._onevent_wrapped = (event) => { this._onevent(event); };\n\n        this._start();\n    }\n\n    dispatchEvent(event: Event): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    _start() {\n        let url = this.url;\n\n        if (this._lastEventId) {\n            if (url.indexOf('?') === -1) {\n                url += '?';\n            } else {\n                url += '&';\n            }\n            url += 'lastEventId=' + encodeURIComponent(this._lastEventId);\n        }\n\n        this._eventSource = new this.eventSourceClass(url, this._configuration);\n\n        this._eventSource.onopen = (event) => { this._onopen(event); };\n        this._eventSource.onerror = (event) => { this._onerror(event); };\n        this._eventSource.onmessage = (event) => { this.onmessage(event); };\n\n        // apply listen types\n        for (const type of Object.keys(this._listeners)) {\n            this._eventSource.addEventListener(type, this._onevent_wrapped);\n        }\n    }\n\n    _onopen(event: Event) {\n        if (this.readyState === 0) {\n            this.readyState = 1;\n            this.onopen(event);\n        }\n    }\n\n    _onerror(event: Event) {\n        if (this.readyState === 1) {\n            this.readyState = 0;\n            this.onerror(event);\n        }\n\n        if (this._eventSource) {\n            if(this._eventSource.readyState === 2) {\n                // reconnect with new object\n                this._eventSource.close();\n                this._eventSource = null;\n\n                // reconnect after random timeout < max_retry_time\n                const timeout = Math.round(this.max_retry_time * Math.random());\n                this._timer = setTimeout(() => this._start(), timeout);\n            }\n        }\n    }\n\n    _onevent(event: Event) {\n        if (event instanceof MessageEvent) {\n            this._lastEventId = event.lastEventId;\n        }\n\n        const listenersForType = this._listeners[event.type];\n        if (listenersForType != null) {\n            // operate on a copy\n            for (const listener of [...listenersForType]) {\n                listener.call(this, event);\n            }\n        }\n\n        if (event.type === 'message') {\n            this.onmessage(event as MessageEvent);\n        }\n    }\n\n    onopen(event: Event) {\n        // may be overridden\n    }\n\n    onerror(event: Event) {\n        // may be overridden\n    }\n\n    onmessage(event: MessageEvent) {\n        // may be overridden\n    }\n\n    close() {\n        if (this._timer) {\n            clearTimeout(this._timer);\n            this._timer = null;\n        }\n\n        if (this._eventSource) {\n            this._eventSource.close();\n            this._eventSource = null;\n        }\n\n        this.readyState = 2;\n    }\n\n    addEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener(type: string, listener: (this: EventSource, event: MessageEvent<any>) => any, options?: boolean | AddEventListenerOptions): void;\n    addEventListener<K extends string>(type: K, listener: EventListenerType<K>, options?: boolean | AddEventListenerOptions): void {\n        // We don't support the options arg at the moment\n\n        if (!(type in this._listeners)) {\n            this._listeners[type] = [];\n            if (this._eventSource != null) {\n                this._eventSource.addEventListener(type, this._onevent_wrapped);\n            }\n        }\n\n        const listenersForType = this._listeners[type] as EventListenerType<K>[];\n        if (Array.isArray(listenersForType) && !listenersForType.includes(listener)) {\n            listenersForType.push(listener);\n        }\n    }\n\n    removeEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener(type: string, listener: (this: EventSource, event: MessageEvent<any>) => any, options?: boolean | EventListenerOptions): void;\n    removeEventListener<K extends string>(type: K, listener: EventListenerType<K>, options?: boolean | EventListenerOptions): void {\n        // We don't support the options arg at the moment\n\n        const listenersForType = this._listeners[type] as EventListenerType<K>[];\n        if (listenersForType != null) {\n            // eslint-disable-next-line no-constant-condition\n            while(true) {\n                const index = listenersForType.indexOf(listener);\n                if (index === -1) {\n                    break;\n                }\n                listenersForType.splice(index, 1);\n            }\n\n            if (listenersForType.length <= 0) {\n                delete this._listeners[type];\n                if (this._eventSource != null) {\n                    this._eventSource.removeEventListener(type, this._onevent_wrapped);\n                }\n            }\n        }\n    }\n}\n"]}